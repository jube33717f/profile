{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar MarkdownUtil_1 = require(\"../util/MarkdownUtil\");\n\nexports.codeCommand = {\n  name: \"code\",\n  buttonProps: {\n    \"aria-label\": \"Insert code\"\n  },\n  execute: function (state0, api) {\n    // Adjust the selection to encompass the whole word if the caret is inside one\n    var newSelectionRange = MarkdownUtil_1.selectWord({\n      text: state0.text,\n      selection: state0.selection\n    });\n    var state1 = api.setSelectionRange(newSelectionRange); // when there's no breaking line\n\n    if (state1.selectedText.indexOf(\"\\n\") === -1) {\n      api.replaceSelection(\"`\" + state1.selectedText + \"`\"); // Adjust the selection to not contain the **\n\n      var selectionStart_1 = state1.selection.start + 1;\n      var selectionEnd_1 = selectionStart_1 + state1.selectedText.length;\n      api.setSelectionRange({\n        start: selectionStart_1,\n        end: selectionEnd_1\n      });\n      return;\n    }\n\n    var breaksBeforeCount = MarkdownUtil_1.getBreaksNeededForEmptyLineBefore(state1.text, state1.selection.start);\n    var breaksBefore = Array(breaksBeforeCount + 1).join(\"\\n\");\n    var breaksAfterCount = MarkdownUtil_1.getBreaksNeededForEmptyLineAfter(state1.text, state1.selection.end);\n    var breaksAfter = Array(breaksAfterCount + 1).join(\"\\n\");\n    api.replaceSelection(breaksBefore + \"```\\n\" + state1.selectedText + \"\\n```\" + breaksAfter);\n    var selectionStart = state1.selection.start + breaksBeforeCount + 4;\n    var selectionEnd = selectionStart + state1.selectedText.length;\n    api.setSelectionRange({\n      start: selectionStart,\n      end: selectionEnd\n    });\n  },\n  keyCommand: \"code\"\n};","map":{"version":3,"sources":["/Users/jubi/fullStack/pro1/profile/node_modules/react-mde/lib/js/commands/codeCommand.js"],"names":["Object","defineProperty","exports","value","MarkdownUtil_1","require","codeCommand","name","buttonProps","execute","state0","api","newSelectionRange","selectWord","text","selection","state1","setSelectionRange","selectedText","indexOf","replaceSelection","selectionStart_1","start","selectionEnd_1","length","end","breaksBeforeCount","getBreaksNeededForEmptyLineBefore","breaksBefore","Array","join","breaksAfterCount","getBreaksNeededForEmptyLineAfter","breaksAfter","selectionStart","selectionEnd","keyCommand"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,cAAc,GAAGC,OAAO,CAAC,sBAAD,CAA5B;;AACAH,OAAO,CAACI,WAAR,GAAsB;AAClBC,EAAAA,IAAI,EAAE,MADY;AAElBC,EAAAA,WAAW,EAAE;AAAE,kBAAc;AAAhB,GAFK;AAGlBC,EAAAA,OAAO,EAAE,UAAUC,MAAV,EAAkBC,GAAlB,EAAuB;AAC5B;AACA,QAAIC,iBAAiB,GAAGR,cAAc,CAACS,UAAf,CAA0B;AAC9CC,MAAAA,IAAI,EAAEJ,MAAM,CAACI,IADiC;AAE9CC,MAAAA,SAAS,EAAEL,MAAM,CAACK;AAF4B,KAA1B,CAAxB;AAIA,QAAIC,MAAM,GAAGL,GAAG,CAACM,iBAAJ,CAAsBL,iBAAtB,CAAb,CAN4B,CAO5B;;AACA,QAAII,MAAM,CAACE,YAAP,CAAoBC,OAApB,CAA4B,IAA5B,MAAsC,CAAC,CAA3C,EAA8C;AAC1CR,MAAAA,GAAG,CAACS,gBAAJ,CAAqB,MAAMJ,MAAM,CAACE,YAAb,GAA4B,GAAjD,EAD0C,CAE1C;;AACA,UAAIG,gBAAgB,GAAGL,MAAM,CAACD,SAAP,CAAiBO,KAAjB,GAAyB,CAAhD;AACA,UAAIC,cAAc,GAAGF,gBAAgB,GAAGL,MAAM,CAACE,YAAP,CAAoBM,MAA5D;AACAb,MAAAA,GAAG,CAACM,iBAAJ,CAAsB;AAClBK,QAAAA,KAAK,EAAED,gBADW;AAElBI,QAAAA,GAAG,EAAEF;AAFa,OAAtB;AAIA;AACH;;AACD,QAAIG,iBAAiB,GAAGtB,cAAc,CAACuB,iCAAf,CAAiDX,MAAM,CAACF,IAAxD,EAA8DE,MAAM,CAACD,SAAP,CAAiBO,KAA/E,CAAxB;AACA,QAAIM,YAAY,GAAGC,KAAK,CAACH,iBAAiB,GAAG,CAArB,CAAL,CAA6BI,IAA7B,CAAkC,IAAlC,CAAnB;AACA,QAAIC,gBAAgB,GAAG3B,cAAc,CAAC4B,gCAAf,CAAgDhB,MAAM,CAACF,IAAvD,EAA6DE,MAAM,CAACD,SAAP,CAAiBU,GAA9E,CAAvB;AACA,QAAIQ,WAAW,GAAGJ,KAAK,CAACE,gBAAgB,GAAG,CAApB,CAAL,CAA4BD,IAA5B,CAAiC,IAAjC,CAAlB;AACAnB,IAAAA,GAAG,CAACS,gBAAJ,CAAqBQ,YAAY,GAAG,OAAf,GAAyBZ,MAAM,CAACE,YAAhC,GAA+C,OAA/C,GAAyDe,WAA9E;AACA,QAAIC,cAAc,GAAGlB,MAAM,CAACD,SAAP,CAAiBO,KAAjB,GAAyBI,iBAAzB,GAA6C,CAAlE;AACA,QAAIS,YAAY,GAAGD,cAAc,GAAGlB,MAAM,CAACE,YAAP,CAAoBM,MAAxD;AACAb,IAAAA,GAAG,CAACM,iBAAJ,CAAsB;AAClBK,MAAAA,KAAK,EAAEY,cADW;AAElBT,MAAAA,GAAG,EAAEU;AAFa,KAAtB;AAIH,GAjCiB;AAkClBC,EAAAA,UAAU,EAAE;AAlCM,CAAtB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar MarkdownUtil_1 = require(\"../util/MarkdownUtil\");\nexports.codeCommand = {\n    name: \"code\",\n    buttonProps: { \"aria-label\": \"Insert code\" },\n    execute: function (state0, api) {\n        // Adjust the selection to encompass the whole word if the caret is inside one\n        var newSelectionRange = MarkdownUtil_1.selectWord({\n            text: state0.text,\n            selection: state0.selection\n        });\n        var state1 = api.setSelectionRange(newSelectionRange);\n        // when there's no breaking line\n        if (state1.selectedText.indexOf(\"\\n\") === -1) {\n            api.replaceSelection(\"`\" + state1.selectedText + \"`\");\n            // Adjust the selection to not contain the **\n            var selectionStart_1 = state1.selection.start + 1;\n            var selectionEnd_1 = selectionStart_1 + state1.selectedText.length;\n            api.setSelectionRange({\n                start: selectionStart_1,\n                end: selectionEnd_1\n            });\n            return;\n        }\n        var breaksBeforeCount = MarkdownUtil_1.getBreaksNeededForEmptyLineBefore(state1.text, state1.selection.start);\n        var breaksBefore = Array(breaksBeforeCount + 1).join(\"\\n\");\n        var breaksAfterCount = MarkdownUtil_1.getBreaksNeededForEmptyLineAfter(state1.text, state1.selection.end);\n        var breaksAfter = Array(breaksAfterCount + 1).join(\"\\n\");\n        api.replaceSelection(breaksBefore + \"```\\n\" + state1.selectedText + \"\\n```\" + breaksAfter);\n        var selectionStart = state1.selection.start + breaksBeforeCount + 4;\n        var selectionEnd = selectionStart + state1.selectedText.length;\n        api.setSelectionRange({\n            start: selectionStart,\n            end: selectionEnd\n        });\n    },\n    keyCommand: \"code\"\n};\n"]},"metadata":{},"sourceType":"script"}