{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar MarkdownUtil_1 = require(\"../util/MarkdownUtil\");\n\nexports.quoteCommand = {\n  name: \"quote\",\n  buttonProps: {\n    \"aria-label\": \"Insert a quote\"\n  },\n  execute: function (state0, api) {\n    // Adjust the selection to encompass the whole word if the caret is inside one\n    var newSelectionRange = MarkdownUtil_1.selectWord({\n      text: state0.text,\n      selection: state0.selection\n    });\n    var state1 = api.setSelectionRange(newSelectionRange);\n    var breaksBeforeCount = MarkdownUtil_1.getBreaksNeededForEmptyLineBefore(state1.text, state1.selection.start);\n    var breaksBefore = Array(breaksBeforeCount + 1).join(\"\\n\");\n    var breaksAfterCount = MarkdownUtil_1.getBreaksNeededForEmptyLineAfter(state1.text, state1.selection.end);\n    var breaksAfter = Array(breaksAfterCount + 1).join(\"\\n\"); // Replaces the current selection with the quote mark up\n\n    api.replaceSelection(breaksBefore + \"> \" + state1.selectedText + breaksAfter);\n    var selectionStart = state1.selection.start + breaksBeforeCount + 2;\n    var selectionEnd = selectionStart + state1.selectedText.length;\n    api.setSelectionRange({\n      start: selectionStart,\n      end: selectionEnd\n    });\n  },\n  keyCommand: \"quote\"\n};","map":{"version":3,"sources":["/Users/jubi/fullStack/pro1/profile/node_modules/react-mde/lib/js/commands/quoteCommand.js"],"names":["Object","defineProperty","exports","value","MarkdownUtil_1","require","quoteCommand","name","buttonProps","execute","state0","api","newSelectionRange","selectWord","text","selection","state1","setSelectionRange","breaksBeforeCount","getBreaksNeededForEmptyLineBefore","start","breaksBefore","Array","join","breaksAfterCount","getBreaksNeededForEmptyLineAfter","end","breaksAfter","replaceSelection","selectedText","selectionStart","selectionEnd","length","keyCommand"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,cAAc,GAAGC,OAAO,CAAC,sBAAD,CAA5B;;AACAH,OAAO,CAACI,YAAR,GAAuB;AACnBC,EAAAA,IAAI,EAAE,OADa;AAEnBC,EAAAA,WAAW,EAAE;AAAE,kBAAc;AAAhB,GAFM;AAGnBC,EAAAA,OAAO,EAAE,UAAUC,MAAV,EAAkBC,GAAlB,EAAuB;AAC5B;AACA,QAAIC,iBAAiB,GAAGR,cAAc,CAACS,UAAf,CAA0B;AAC9CC,MAAAA,IAAI,EAAEJ,MAAM,CAACI,IADiC;AAE9CC,MAAAA,SAAS,EAAEL,MAAM,CAACK;AAF4B,KAA1B,CAAxB;AAIA,QAAIC,MAAM,GAAGL,GAAG,CAACM,iBAAJ,CAAsBL,iBAAtB,CAAb;AACA,QAAIM,iBAAiB,GAAGd,cAAc,CAACe,iCAAf,CAAiDH,MAAM,CAACF,IAAxD,EAA8DE,MAAM,CAACD,SAAP,CAAiBK,KAA/E,CAAxB;AACA,QAAIC,YAAY,GAAGC,KAAK,CAACJ,iBAAiB,GAAG,CAArB,CAAL,CAA6BK,IAA7B,CAAkC,IAAlC,CAAnB;AACA,QAAIC,gBAAgB,GAAGpB,cAAc,CAACqB,gCAAf,CAAgDT,MAAM,CAACF,IAAvD,EAA6DE,MAAM,CAACD,SAAP,CAAiBW,GAA9E,CAAvB;AACA,QAAIC,WAAW,GAAGL,KAAK,CAACE,gBAAgB,GAAG,CAApB,CAAL,CAA4BD,IAA5B,CAAiC,IAAjC,CAAlB,CAV4B,CAW5B;;AACAZ,IAAAA,GAAG,CAACiB,gBAAJ,CAAqBP,YAAY,GAAG,IAAf,GAAsBL,MAAM,CAACa,YAA7B,GAA4CF,WAAjE;AACA,QAAIG,cAAc,GAAGd,MAAM,CAACD,SAAP,CAAiBK,KAAjB,GAAyBF,iBAAzB,GAA6C,CAAlE;AACA,QAAIa,YAAY,GAAGD,cAAc,GAAGd,MAAM,CAACa,YAAP,CAAoBG,MAAxD;AACArB,IAAAA,GAAG,CAACM,iBAAJ,CAAsB;AAClBG,MAAAA,KAAK,EAAEU,cADW;AAElBJ,MAAAA,GAAG,EAAEK;AAFa,KAAtB;AAIH,GAtBkB;AAuBnBE,EAAAA,UAAU,EAAE;AAvBO,CAAvB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar MarkdownUtil_1 = require(\"../util/MarkdownUtil\");\nexports.quoteCommand = {\n    name: \"quote\",\n    buttonProps: { \"aria-label\": \"Insert a quote\" },\n    execute: function (state0, api) {\n        // Adjust the selection to encompass the whole word if the caret is inside one\n        var newSelectionRange = MarkdownUtil_1.selectWord({\n            text: state0.text,\n            selection: state0.selection\n        });\n        var state1 = api.setSelectionRange(newSelectionRange);\n        var breaksBeforeCount = MarkdownUtil_1.getBreaksNeededForEmptyLineBefore(state1.text, state1.selection.start);\n        var breaksBefore = Array(breaksBeforeCount + 1).join(\"\\n\");\n        var breaksAfterCount = MarkdownUtil_1.getBreaksNeededForEmptyLineAfter(state1.text, state1.selection.end);\n        var breaksAfter = Array(breaksAfterCount + 1).join(\"\\n\");\n        // Replaces the current selection with the quote mark up\n        api.replaceSelection(breaksBefore + \"> \" + state1.selectedText + breaksAfter);\n        var selectionStart = state1.selection.start + breaksBeforeCount + 2;\n        var selectionEnd = selectionStart + state1.selectedText.length;\n        api.setSelectionRange({\n            start: selectionStart,\n            end: selectionEnd\n        });\n    },\n    keyCommand: \"quote\"\n};\n"]},"metadata":{},"sourceType":"script"}