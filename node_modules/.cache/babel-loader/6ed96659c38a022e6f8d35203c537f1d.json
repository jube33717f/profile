{"ast":null,"code":"'use strict';\n/**\n * 将输入的任意对象转换成 Date，如果装换失败将返回当前时间\n * @param  {any} datetime 需要被格式化的时间\n * @return {Date}         转换好的 Date\n */\n\nfunction getDateObject(datetime) {\n  var t = datetime instanceof Date ? datetime : new Date(datetime);\n\n  if (!t.getDate()) {\n    t = new Date();\n  }\n\n  return t;\n}\n/**\n * 格式化时间\n * @param  {Date}   datetime  需要被格式化的时间\n * @param  {string} formatStr 格式化字符串，默认为 'YYYY-MM-DD HH:mm:ss'\n * @return {string}           格式化后的时间字符串\n */\n\n\nfunction format(datetime, formatStr) {\n  var t = getDateObject(datetime);\n  var hours = undefined,\n      o = undefined,\n      i = 0;\n  formatStr = formatStr || 'YYYY-MM-DD HH:mm:ss';\n  hours = t.getHours();\n  o = [['M+', t.getMonth() + 1], ['D+', t.getDate()], // H 24小时制\n  ['H+', hours], // h 12小时制\n  ['h+', hours > 12 ? hours - 12 : hours], ['m+', t.getMinutes()], ['s+', t.getSeconds()]]; // 替换 Y\n\n  if (/(Y+)/.test(formatStr)) {\n    formatStr = formatStr.replace(RegExp.$1, (t.getFullYear() + '').substr(4 - RegExp.$1.length));\n  } // 替换 M, D, H, h, m, s\n\n\n  for (; i < o.length; i++) {\n    if (new RegExp('(' + o[i][0] + ')').test(formatStr)) {\n      formatStr = formatStr.replace(RegExp.$1, RegExp.$1.length === 1 ? o[i][1] : ('00' + o[i][1]).substr(('' + o[i][1]).length));\n    }\n  } // 替换 a/A 为 am, pm\n\n\n  return formatStr.replace(/a/ig, hours > 11 ? 'pm' : 'am');\n}\n/**\n * CONST and VAR for .fromNow\n */\n// 预设语言：英语\n\n\nvar LOCALE_EN = {\n  future: 'in %s',\n  past: '%s ago',\n  s: 'a few seconds',\n  mm: '%s minutes',\n  hh: '%s hours',\n  dd: '%s days',\n  MM: '%s months',\n  yy: '%s years'\n}; // 预设语言：简体中文\n\nvar LOCALE_ZH_CN = {\n  future: '%s内',\n  past: '%s前',\n  s: '几秒',\n  mm: '%s分钟',\n  hh: '%s小时',\n  dd: '%s天',\n  MM: '%s月',\n  yy: '%s年'\n}; // 当前本地化语言对象\n\nvar _curentLocale = undefined;\n/**\n * 修改本地化语言\n * @param  {string|Object}   string: 预设语言 `zh-cn` 或 `en`；Object: 自定义 locate 对象\n */\n\nfunction locate(arg) {\n  var newLocale = undefined,\n      prop = undefined;\n\n  if (typeof arg === 'string') {\n    newLocale = arg === 'zh-cn' ? LOCALE_ZH_CN : LOCALE_EN;\n  } else {\n    newLocale = arg;\n  }\n\n  if (!_curentLocale) {\n    _curentLocale = {};\n  }\n\n  for (prop in newLocale) {\n    if (newLocale.hasOwnProperty(prop) && typeof newLocale[prop] === 'string') {\n      _curentLocale[prop] = newLocale[prop];\n    }\n  }\n}\n/**\n * CONST for .fromNow\n */\n// 各计算区间\n\n\nvar DET_STD = [['yy', 31536e6], // 1000 * 60 * 60 * 24 * 365 一年月按 365 天算\n['MM', 2592e6], // 1000 * 60 * 60 * 24 * 30 一个月按 30 天算\n['dd', 864e5], // 1000 * 60 * 60 * 24\n['hh', 36e5], // 1000 * 60 * 60\n['mm', 6e4], // 1000 * 60\n['s', 0]];\n/**\n * 计算给出时间和当前时间的时间距离\n * @param  {Date}   datetime 需要计算的时间\n * @return {string}          时间距离\n */\n// 只要大于等于 0 都是秒\n\nfunction fromNow(datetime) {\n  if (!_curentLocale) {\n    // 初始化本地化语言为 en\n    locate('');\n  }\n\n  var det = +new Date() - +getDateObject(datetime);\n  var format = undefined,\n      str = undefined,\n      i = 0,\n      detDef = undefined,\n      detDefVal = undefined;\n\n  if (det < 0) {\n    format = _curentLocale.future;\n    det = -det;\n  } else {\n    format = _curentLocale.past;\n  }\n\n  for (; i < DET_STD.length; i++) {\n    detDef = DET_STD[i];\n    detDefVal = detDef[1];\n\n    if (det >= detDefVal) {\n      str = _curentLocale[detDef[0]].replace('%s', parseInt(det / detDefVal, 0) || 1);\n      break;\n    }\n  }\n\n  return format.replace('%s', str);\n}\n\nexports.format = format;\nexports.locate = locate;\nexports.fromNow = fromNow;","map":{"version":3,"sources":["/Users/jubi/fullStack/pro1/profile/node_modules/silly-datetime/dest/index.js"],"names":["getDateObject","datetime","t","Date","getDate","format","formatStr","hours","undefined","o","i","getHours","getMonth","getMinutes","getSeconds","test","replace","RegExp","$1","getFullYear","substr","length","LOCALE_EN","future","past","s","mm","hh","dd","MM","yy","LOCALE_ZH_CN","_curentLocale","locate","arg","newLocale","prop","hasOwnProperty","DET_STD","fromNow","det","str","detDef","detDefVal","parseInt","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/**\n * 将输入的任意对象转换成 Date，如果装换失败将返回当前时间\n * @param  {any} datetime 需要被格式化的时间\n * @return {Date}         转换好的 Date\n */\nfunction getDateObject(datetime) {\n  var t = datetime instanceof Date ? datetime : new Date(datetime);\n  if (!t.getDate()) {\n    t = new Date();\n  }\n  return t;\n}\n\n/**\n * 格式化时间\n * @param  {Date}   datetime  需要被格式化的时间\n * @param  {string} formatStr 格式化字符串，默认为 'YYYY-MM-DD HH:mm:ss'\n * @return {string}           格式化后的时间字符串\n */\nfunction format(datetime, formatStr) {\n  var t = getDateObject(datetime);\n  var hours = undefined,\n      o = undefined,\n      i = 0;\n  formatStr = formatStr || 'YYYY-MM-DD HH:mm:ss';\n  hours = t.getHours();\n  o = [['M+', t.getMonth() + 1], ['D+', t.getDate()],\n  // H 24小时制\n  ['H+', hours],\n  // h 12小时制\n  ['h+', hours > 12 ? hours - 12 : hours], ['m+', t.getMinutes()], ['s+', t.getSeconds()]];\n  // 替换 Y\n  if (/(Y+)/.test(formatStr)) {\n    formatStr = formatStr.replace(RegExp.$1, (t.getFullYear() + '').substr(4 - RegExp.$1.length));\n  }\n  // 替换 M, D, H, h, m, s\n  for (; i < o.length; i++) {\n    if (new RegExp('(' + o[i][0] + ')').test(formatStr)) {\n      formatStr = formatStr.replace(RegExp.$1, RegExp.$1.length === 1 ? o[i][1] : ('00' + o[i][1]).substr(('' + o[i][1]).length));\n    }\n  }\n  // 替换 a/A 为 am, pm\n  return formatStr.replace(/a/ig, hours > 11 ? 'pm' : 'am');\n}\n\n/**\n * CONST and VAR for .fromNow\n */\n// 预设语言：英语\nvar LOCALE_EN = {\n  future: 'in %s',\n  past: '%s ago',\n  s: 'a few seconds',\n  mm: '%s minutes',\n  hh: '%s hours',\n  dd: '%s days',\n  MM: '%s months',\n  yy: '%s years'\n};\n// 预设语言：简体中文\nvar LOCALE_ZH_CN = {\n  future: '%s内',\n  past: '%s前',\n  s: '几秒',\n  mm: '%s分钟',\n  hh: '%s小时',\n  dd: '%s天',\n  MM: '%s月',\n  yy: '%s年'\n};\n// 当前本地化语言对象\nvar _curentLocale = undefined;\n\n/**\n * 修改本地化语言\n * @param  {string|Object}   string: 预设语言 `zh-cn` 或 `en`；Object: 自定义 locate 对象\n */\nfunction locate(arg) {\n  var newLocale = undefined,\n      prop = undefined;\n  if (typeof arg === 'string') {\n    newLocale = arg === 'zh-cn' ? LOCALE_ZH_CN : LOCALE_EN;\n  } else {\n    newLocale = arg;\n  }\n  if (!_curentLocale) {\n    _curentLocale = {};\n  }\n  for (prop in newLocale) {\n    if (newLocale.hasOwnProperty(prop) && typeof newLocale[prop] === 'string') {\n      _curentLocale[prop] = newLocale[prop];\n    }\n  }\n}\n\n/**\n * CONST for .fromNow\n */\n// 各计算区间\nvar DET_STD = [['yy', 31536e6], // 1000 * 60 * 60 * 24 * 365 一年月按 365 天算\n['MM', 2592e6], // 1000 * 60 * 60 * 24 * 30 一个月按 30 天算\n['dd', 864e5], // 1000 * 60 * 60 * 24\n['hh', 36e5], // 1000 * 60 * 60\n['mm', 6e4], // 1000 * 60\n['s', 0]];\n\n/**\n * 计算给出时间和当前时间的时间距离\n * @param  {Date}   datetime 需要计算的时间\n * @return {string}          时间距离\n */\n// 只要大于等于 0 都是秒\nfunction fromNow(datetime) {\n  if (!_curentLocale) {\n    // 初始化本地化语言为 en\n    locate('');\n  }\n  var det = +new Date() - +getDateObject(datetime);\n  var format = undefined,\n      str = undefined,\n      i = 0,\n      detDef = undefined,\n      detDefVal = undefined;\n  if (det < 0) {\n    format = _curentLocale.future;\n    det = -det;\n  } else {\n    format = _curentLocale.past;\n  }\n  for (; i < DET_STD.length; i++) {\n    detDef = DET_STD[i];\n    detDefVal = detDef[1];\n    if (det >= detDefVal) {\n      str = _curentLocale[detDef[0]].replace('%s', parseInt(det / detDefVal, 0) || 1);\n      break;\n    }\n  }\n  return format.replace('%s', str);\n}\n\nexports.format = format;\nexports.locate = locate;\nexports.fromNow = fromNow;"]},"metadata":{},"sourceType":"script"}