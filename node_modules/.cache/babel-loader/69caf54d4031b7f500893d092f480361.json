{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = require(\"react\");\n\nvar react_1 = require(\"react\");\n\nvar ClassNames_1 = require(\"../util/ClassNames\");\n\nexports.SuggestionsDropdown = function (_a) {\n  var classes = _a.classes,\n      suggestions = _a.suggestions,\n      caret = _a.caret,\n      onSuggestionSelected = _a.onSuggestionSelected,\n      focusIndex = _a.focusIndex;\n  var handleSuggestionClick = react_1.useCallback(function (event) {\n    event.preventDefault();\n    var index = parseInt(event.currentTarget.attributes[\"data-index\"].value);\n    onSuggestionSelected(index);\n  }, [suggestions]); // onMouseDown should be cancelled because onClick will handle it propertly. This way, the textarea does not lose\n  // focus\n\n  var handleMouseDown = react_1.useCallback(function (event) {\n    return event.preventDefault();\n  }, []);\n  return React.createElement(\"ul\", {\n    className: ClassNames_1.classNames(\"mde-suggestions\", classes),\n    style: {\n      left: caret.left,\n      top: caret.top\n    }\n  }, suggestions.map(function (s, i) {\n    return React.createElement(\"li\", {\n      onClick: handleSuggestionClick,\n      onMouseDown: handleMouseDown,\n      key: i,\n      \"aria-selected\": focusIndex === i ? \"true\" : \"false\",\n      \"data-index\": \"\" + i\n    }, s.preview);\n  }));\n};","map":{"version":3,"sources":["/Users/jubi/fullStack/pro1/profile/node_modules/react-mde/lib/js/components/SuggestionsDropdown.js"],"names":["Object","defineProperty","exports","value","React","require","react_1","ClassNames_1","SuggestionsDropdown","_a","classes","suggestions","caret","onSuggestionSelected","focusIndex","handleSuggestionClick","useCallback","event","preventDefault","index","parseInt","currentTarget","attributes","handleMouseDown","createElement","className","classNames","style","left","top","map","s","i","onClick","onMouseDown","key","preview"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAnB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,OAAD,CAArB;;AACA,IAAIE,YAAY,GAAGF,OAAO,CAAC,oBAAD,CAA1B;;AACAH,OAAO,CAACM,mBAAR,GAA8B,UAAUC,EAAV,EAAc;AACxC,MAAIC,OAAO,GAAGD,EAAE,CAACC,OAAjB;AAAA,MAA0BC,WAAW,GAAGF,EAAE,CAACE,WAA3C;AAAA,MAAwDC,KAAK,GAAGH,EAAE,CAACG,KAAnE;AAAA,MAA0EC,oBAAoB,GAAGJ,EAAE,CAACI,oBAApG;AAAA,MAA0HC,UAAU,GAAGL,EAAE,CAACK,UAA1I;AACA,MAAIC,qBAAqB,GAAGT,OAAO,CAACU,WAAR,CAAoB,UAAUC,KAAV,EAAiB;AAC7DA,IAAAA,KAAK,CAACC,cAAN;AACA,QAAIC,KAAK,GAAGC,QAAQ,CAACH,KAAK,CAACI,aAAN,CAAoBC,UAApB,CAA+B,YAA/B,EAA6CnB,KAA9C,CAApB;AACAU,IAAAA,oBAAoB,CAACM,KAAD,CAApB;AACH,GAJ2B,EAIzB,CAACR,WAAD,CAJyB,CAA5B,CAFwC,CAOxC;AACA;;AACA,MAAIY,eAAe,GAAGjB,OAAO,CAACU,WAAR,CAAoB,UAAUC,KAAV,EAAiB;AAAE,WAAOA,KAAK,CAACC,cAAN,EAAP;AAAgC,GAAvE,EAAyE,EAAzE,CAAtB;AACA,SAAOd,KAAK,CAACoB,aAAN,CAAoB,IAApB,EAA0B;AAAEC,IAAAA,SAAS,EAAElB,YAAY,CAACmB,UAAb,CAAwB,iBAAxB,EAA2ChB,OAA3C,CAAb;AAAkEiB,IAAAA,KAAK,EAAE;AAAEC,MAAAA,IAAI,EAAEhB,KAAK,CAACgB,IAAd;AAAoBC,MAAAA,GAAG,EAAEjB,KAAK,CAACiB;AAA/B;AAAzE,GAA1B,EAA2IlB,WAAW,CAACmB,GAAZ,CAAgB,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAAE,WAAO5B,KAAK,CAACoB,aAAN,CAAoB,IAApB,EAA0B;AAAES,MAAAA,OAAO,EAAElB,qBAAX;AAAkCmB,MAAAA,WAAW,EAAEX,eAA/C;AAAgEY,MAAAA,GAAG,EAAEH,CAArE;AAAwE,uBAAiBlB,UAAU,KAAKkB,CAAf,GAAmB,MAAnB,GAA4B,OAArH;AAA8H,oBAAc,KAAKA;AAAjJ,KAA1B,EAAgLD,CAAC,CAACK,OAAlL,CAAP;AAAoM,GAAtO,CAA3I,CAAP;AACH,CAXD","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar React = require(\"react\");\nvar react_1 = require(\"react\");\nvar ClassNames_1 = require(\"../util/ClassNames\");\nexports.SuggestionsDropdown = function (_a) {\n    var classes = _a.classes, suggestions = _a.suggestions, caret = _a.caret, onSuggestionSelected = _a.onSuggestionSelected, focusIndex = _a.focusIndex;\n    var handleSuggestionClick = react_1.useCallback(function (event) {\n        event.preventDefault();\n        var index = parseInt(event.currentTarget.attributes[\"data-index\"].value);\n        onSuggestionSelected(index);\n    }, [suggestions]);\n    // onMouseDown should be cancelled because onClick will handle it propertly. This way, the textarea does not lose\n    // focus\n    var handleMouseDown = react_1.useCallback(function (event) { return event.preventDefault(); }, []);\n    return React.createElement(\"ul\", { className: ClassNames_1.classNames(\"mde-suggestions\", classes), style: { left: caret.left, top: caret.top } }, suggestions.map(function (s, i) { return React.createElement(\"li\", { onClick: handleSuggestionClick, onMouseDown: handleMouseDown, key: i, \"aria-selected\": focusIndex === i ? \"true\" : \"false\", \"data-index\": \"\" + i }, s.preview); }));\n};\n"]},"metadata":{},"sourceType":"script"}