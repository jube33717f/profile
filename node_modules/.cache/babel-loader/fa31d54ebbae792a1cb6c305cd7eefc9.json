{"ast":null,"code":"var _jsxFileName = \"/Users/jubi/fullStack/pro1/profile/src/page/contact/map.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom'; // import { Map, GoogleApiWrapper, InfoWindow, Marker  } from 'google-maps-react';\n\nconst mapStyles = {\n  map: {\n    width: '120%',\n    height: '200px',\n    left: '-15%'\n  }\n};\nexport class CurrentLocation extends React.Component {\n  constructor(props) {\n    super(props);\n    const {\n      lat,\n      lng\n    } = this.props.initialCenter;\n    this.state = {\n      currentLocation: {\n        lat: lat,\n        lng: lng\n      }\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.google !== this.props.google) {\n      this.loadMap();\n    }\n\n    if (prevState.currentLocation !== this.state.currentLocation) {\n      this.recenterMap();\n    }\n\n    console.log(this.state.currentLocation);\n  }\n\n  recenterMap() {\n    const map = this.map;\n    const current = this.state.currentLocation;\n    const google = this.props.google;\n    const maps = google.maps;\n\n    if (map) {\n      let center = new maps.LatLng(current.lat, current.lng);\n      map.panTo(center);\n    }\n  }\n\n  componentDidMount() {\n    //if (this.props.centerAroundCurrentLocation) {\n    //   if (navigator && navigator.geolocation) {\n    //     navigator.geolocation.getCurrentPosition(pos => {\n    //       const coords = pos.coords;\n    //       this.setState({\n    //         currentLocation: {\n    //           lat: coords.latitude,\n    //           lng: coords.longitude\n    //         }\n    //       });\n    //     });\n    //   }\n    // }\n    this.setState({\n      currentLocation: {\n        lat: -33.911563699999995,\n        lng: 151.22370469999998\n      }\n    });\n    this.loadMap();\n  }\n\n  loadMap() {\n    if (this.props && this.props.google) {\n      // checks if google is available\n      const {\n        google\n      } = this.props;\n      const maps = google.maps;\n      const mapRef = this.refs.map; // reference to the actual DOM element\n\n      const node = ReactDOM.findDOMNode(mapRef);\n      let {\n        zoom\n      } = this.props;\n      const {\n        lat,\n        lng\n      } = this.state.currentLocation;\n      const center = new maps.LatLng(lat, lng);\n      const mapConfig = Object.assign({}, {\n        center: center,\n        zoom: zoom\n      }); // maps.Map() is constructor that instantiates the map\n\n      this.map = new maps.Map(node, mapConfig);\n    }\n  }\n\n  renderChildren() {\n    const {\n      children\n    } = this.props;\n    if (!children) return;\n    return React.Children.map(children, c => {\n      if (!c) return;\n      return React.cloneElement(c, {\n        map: this.map,\n        google: this.props.google,\n        mapCenter: this.state.currentLocation\n      });\n    });\n  }\n\n  render() {\n    const style = Object.assign({}, mapStyles.map);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 10\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: style,\n      ref: \"map\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 12\n      }\n    }, \"Loading map...\"), this.renderChildren());\n  }\n\n}\nexport default CurrentLocation;\nCurrentLocation.defaultProps = {\n  zoom: 14,\n  initialCenter: {\n    lat: -33.911563699999995,\n    lng: 151.22370469999998\n  },\n  centerAroundCurrentLocation: false,\n  visible: true\n};","map":{"version":3,"sources":["/Users/jubi/fullStack/pro1/profile/src/page/contact/map.js"],"names":["React","ReactDOM","mapStyles","map","width","height","left","CurrentLocation","Component","constructor","props","lat","lng","initialCenter","state","currentLocation","componentDidUpdate","prevProps","prevState","google","loadMap","recenterMap","console","log","current","maps","center","LatLng","panTo","componentDidMount","setState","mapRef","refs","node","findDOMNode","zoom","mapConfig","Object","assign","Map","renderChildren","children","Children","c","cloneElement","mapCenter","render","style","defaultProps","centerAroundCurrentLocation","visible"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n// import { Map, GoogleApiWrapper, InfoWindow, Marker  } from 'google-maps-react';\nconst mapStyles = {\n    map: {\n      \n      width: '120%',\n      height: '200px',\n      left:'-15%'\n    }\n  };\n\nexport class CurrentLocation extends React.Component {\n    constructor(props) {\n      super(props);\n    \n      const { lat, lng } = this.props.initialCenter;\n      this.state = {\n        currentLocation: {\n          lat: lat,\n          lng: lng\n        },\n      \n      };\n    }\n  \n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.google !== this.props.google) {\n          this.loadMap();\n        }\n        if (prevState.currentLocation !== this.state.currentLocation) {\n          this.recenterMap();\n          \n        }\n        console.log(this.state.currentLocation)\n      }\n    recenterMap() {\n        const map = this.map;\n        const current = this.state.currentLocation;\n\n        const google = this.props.google;\n        const maps = google.maps;\n\n        if (map) {\n            let center = new maps.LatLng(current.lat, current.lng);\n            map.panTo(center);\n        }\n    }\n    componentDidMount() {\n        //if (this.props.centerAroundCurrentLocation) {\n        //   if (navigator && navigator.geolocation) {\n        //     navigator.geolocation.getCurrentPosition(pos => {\n        //       const coords = pos.coords;\n        //       this.setState({\n        //         currentLocation: {\n        //           lat: coords.latitude,\n        //           lng: coords.longitude\n        //         }\n        //       });\n        //     });\n        //   }\n        // }\n        this.setState({\n                    currentLocation: {\n                      lat: -33.911563699999995,\n                      lng: 151.22370469999998\n                    }\n                  });\n        this.loadMap();\n    }\n    loadMap() {\n        if (this.props && this.props.google) {\n          // checks if google is available\n          const { google } = this.props;\n          const maps = google.maps;\n    \n          const mapRef = this.refs.map;\n    \n          // reference to the actual DOM element\n          const node = ReactDOM.findDOMNode(mapRef);\n    \n          let { zoom } = this.props;\n          const { lat, lng } = this.state.currentLocation;\n          const center = new maps.LatLng(lat, lng);\n          const mapConfig = Object.assign(\n            {},\n            {\n              center: center,\n              zoom: zoom\n            }\n          );\n    \n          // maps.Map() is constructor that instantiates the map\n          this.map = new maps.Map(node, mapConfig);\n        }\n      }\n      renderChildren() {\n        const { children } = this.props;\n    \n        if (!children) return;\n    \n        return React.Children.map(children, c => {\n          if (!c) return;\n          return React.cloneElement(c, {\n            map: this.map,\n            google: this.props.google,\n            mapCenter: this.state.currentLocation\n          });\n        });\n      }\n      render() {\n        const style = Object.assign({}, mapStyles.map);\n       return (\n         <div>\n           <div style={style} ref=\"map\">\n             Loading map...\n           </div>\n           {this.renderChildren()}\n         </div>\n       );\n     }\n  }\nexport default CurrentLocation;\n  CurrentLocation.defaultProps = {\n    zoom: 14,\n    initialCenter: {\n    lat: -33.911563699999995,\n    lng: 151.22370469999998\n   },\n  centerAroundCurrentLocation: false,\n  visible: true\n};"]},"metadata":{},"sourceType":"module"}